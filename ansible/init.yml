---
- name: Deploy Infra Components for DevOps with OpenShift and OpenShift Ansible Broker Workshop
  hosts: localhost
  gather_facts: false
  run_once: true
  vars:
    lab_infra_project: lab-infra
    user_gogs_admin: gogs
    user_gogs_user: developer
    user_gogs_password: openshift
    labs_github_ref: master
    openshift_cli: oc

  tasks:
    - include_role:
        name: openshift_common_facts
      tags: always

    - name: create lab infra project
      shell: "{{ openshift_cli }} new-project {{ lab_infra_project }} --display-name='Lab Infra'"
      ignore_errors: true
      tags: always

    - name: make lab infra project global
      shell: "{{ openshift_cli }} adm pod-network make-projects-global {{ lab_infra_project }}"
      ignore_errors: true
      tags: always

    # deploy nexus
    - import_role:
        name: openshift_sonatype_nexus
      vars:
        project_name: "{{ lab_infra_project }}"
        nexus_image_version: 3.7.1
        nexus_max_memory: 6Gi
      tags: nexus

    # deploy gogs
    - set_fact:
        gogs_hostname: gogs-{{ lab_infra_project }}.{{ apps_hostname_suffix }}
      tags: always

    - import_role:
        name: openshift_gogs
      vars:
        project_name: "{{ lab_infra_project }}"
        gogs_route: "{{ gogs_hostname }}"
        gogs_image_version: 0.11.34
        gogs_admin_user: "{{ user_gogs_admin }}"
        gogs_admin_password: "{{ user_gogs_password }}"
        gogs_user: "{{ user_gogs_user }}"
        gogs_password: "{{ user_gogs_password }}"
        clean_deploy: true
      tags: gogs

    # deploy guides
    - import_role:
        name: openshift_workshopper
      vars:
        project_name: "{{ lab_infra_project }}"
        workshopper_content_url_prefix: "https://raw.githubusercontent.com/openshift-labs/devops-oab-guides/master"
        workshopper_workshop_urls: "https://raw.githubusercontent.com/openshift-labs/devops-oab-guides/master/_devops-workshop.yml"
        workshopper_env_vars:
          PROJECT_SUFFIX: ""
          GOGS_URL: http://{{ gogs_hostname }}
          OPENSHIFT_DOCS_BASE: "https://docs.openshift.com/container-platform/3.7"
      tags: guides

    # create projects
    - name: create cicd, dev and stage projects
      shell: |
        {{ openshift_cli }} new-project dev   --display-name="CoolStore DEV"
        {{ openshift_cli }} new-project stage --display-name="CoolStore STAGE"
        {{ openshift_cli }} new-project cicd  --display-name="CI/CD"
        
        {{ openshift_cli }} adm policy add-role-to-group admin                system:serviceaccounts:cicd        -n dev
        {{ openshift_cli }} adm policy add-role-to-group admin                system:serviceaccounts:cicd        -n stage
        {{ openshift_cli }} adm policy add-role-to-group system:image-puller  system:serviceaccounts:dev         -n cicd
        {{ openshift_cli }} adm policy add-role-to-group system:image-puller  system:serviceaccounts:stage       -n cicd
        {{ openshift_cli }} adm policy add-role-to-user  system:image-builder system:serviceaccount:dev:builder  -n cicd
      ignore_errors: true
      tags: user_projects

    # configure jenkins slave
    - name: create jenkins slave configmap 
      shell: "{{ openshift_cli }} apply -f https://raw.githubusercontent.com/openshift-labs/devops-oab-labs/master/openshift/jenkins-slave-skopeo.yml -n cicd"
      ignore_errors: true
      tags: user_projects

    # validate cluster
    - name: check openjdk image stream installed
      shell: "{{ openshift_cli }} get is redhat-openjdk18-openshift -n openshift"
      register: jdk_imagestream_result
      ignore_errors: true
      tags: validate

    - name: display instructions to install openjdk image stream
      debug:
        msg:
          - '### WARNING ###'
          - 'OpenJDK image stream is not installed. Run the following as cluster admin:'
          - '{{ openshift_cli }} create -n openshift -f https://raw.githubusercontent.com/openshift/openshift-ansible/release-3.9/roles/openshift_examples/files/examples/v3.9/xpaas-streams/jboss-image-streams.json'
      when: jdk_imagestream_result|failed   
      tags: validate     
